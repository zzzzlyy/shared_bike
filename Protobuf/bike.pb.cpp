// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bike.proto

#include "bike.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tutorial {
PROTOBUF_CONSTEXPR mobile_request::mobile_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mobile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct mobile_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mobile_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~mobile_requestDefaultTypeInternal() {}
  union {
    mobile_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mobile_requestDefaultTypeInternal _mobile_request_default_instance_;
PROTOBUF_CONSTEXPR mobile_response::mobile_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_.icode_)*/0} {}
struct mobile_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mobile_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~mobile_responseDefaultTypeInternal() {}
  union {
    mobile_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mobile_responseDefaultTypeInternal _mobile_response_default_instance_;
PROTOBUF_CONSTEXPR login_request::login_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mobile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.icode_)*/0} {}
struct login_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR login_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~login_requestDefaultTypeInternal() {}
  union {
    login_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 login_requestDefaultTypeInternal _login_request_default_instance_;
PROTOBUF_CONSTEXPR login_response::login_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0} {}
struct login_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR login_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~login_responseDefaultTypeInternal() {}
  union {
    login_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 login_responseDefaultTypeInternal _login_response_default_instance_;
PROTOBUF_CONSTEXPR recharge_request::recharge_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mobile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.amount_)*/0} {}
struct recharge_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR recharge_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~recharge_requestDefaultTypeInternal() {}
  union {
    recharge_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 recharge_requestDefaultTypeInternal _recharge_request_default_instance_;
PROTOBUF_CONSTEXPR recharge_response::recharge_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_.balance_)*/0} {}
struct recharge_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR recharge_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~recharge_responseDefaultTypeInternal() {}
  union {
    recharge_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 recharge_responseDefaultTypeInternal _recharge_response_default_instance_;
PROTOBUF_CONSTEXPR account_balance_request::account_balance_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mobile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct account_balance_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR account_balance_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~account_balance_requestDefaultTypeInternal() {}
  union {
    account_balance_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 account_balance_requestDefaultTypeInternal _account_balance_request_default_instance_;
PROTOBUF_CONSTEXPR account_balance_response::account_balance_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_.balance_)*/0} {}
struct account_balance_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR account_balance_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~account_balance_responseDefaultTypeInternal() {}
  union {
    account_balance_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 account_balance_responseDefaultTypeInternal _account_balance_response_default_instance_;
PROTOBUF_CONSTEXPR list_account_records_request::list_account_records_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mobile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct list_account_records_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR list_account_records_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~list_account_records_requestDefaultTypeInternal() {}
  union {
    list_account_records_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 list_account_records_requestDefaultTypeInternal _list_account_records_request_default_instance_;
PROTOBUF_CONSTEXPR list_account_records_response_account_record::list_account_records_response_account_record(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}} {}
struct list_account_records_response_account_recordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR list_account_records_response_account_recordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~list_account_records_response_account_recordDefaultTypeInternal() {}
  union {
    list_account_records_response_account_record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 list_account_records_response_account_recordDefaultTypeInternal _list_account_records_response_account_record_default_instance_;
PROTOBUF_CONSTEXPR list_account_records_response::list_account_records_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.record_)*/{}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0} {}
struct list_account_records_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR list_account_records_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~list_account_records_responseDefaultTypeInternal() {}
  union {
    list_account_records_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 list_account_records_responseDefaultTypeInternal _list_account_records_response_default_instance_;
PROTOBUF_CONSTEXPR list_travel_records_request::list_travel_records_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mobile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct list_travel_records_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR list_travel_records_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~list_travel_records_requestDefaultTypeInternal() {}
  union {
    list_travel_records_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 list_travel_records_requestDefaultTypeInternal _list_travel_records_request_default_instance_;
PROTOBUF_CONSTEXPR list_travel_records_response_travel_record::list_travel_records_response_travel_record(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stm_)*/uint64_t{0u}
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.amount_)*/0u} {}
struct list_travel_records_response_travel_recordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR list_travel_records_response_travel_recordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~list_travel_records_response_travel_recordDefaultTypeInternal() {}
  union {
    list_travel_records_response_travel_record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 list_travel_records_response_travel_recordDefaultTypeInternal _list_travel_records_response_travel_record_default_instance_;
PROTOBUF_CONSTEXPR list_travel_records_response::list_travel_records_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.records_)*/nullptr
  , /*decltype(_impl_.mileage_)*/0
  , /*decltype(_impl_.discharge_)*/0
  , /*decltype(_impl_.calorie_)*/0
  , /*decltype(_impl_.code_)*/0} {}
struct list_travel_records_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR list_travel_records_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~list_travel_records_responseDefaultTypeInternal() {}
  union {
    list_travel_records_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 list_travel_records_responseDefaultTypeInternal _list_travel_records_response_default_instance_;
}  // namespace tutorial
static ::_pb::Metadata file_level_metadata_bike_2eproto[14];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_bike_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_bike_2eproto = nullptr;

const uint32_t TableStruct_bike_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tutorial::mobile_request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::mobile_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::mobile_request, _impl_.mobile_),
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::mobile_response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::mobile_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::mobile_response, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::tutorial::mobile_response, _impl_.icode_),
  PROTOBUF_FIELD_OFFSET(::tutorial::mobile_response, _impl_.data_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::login_request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::login_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::login_request, _impl_.mobile_),
  PROTOBUF_FIELD_OFFSET(::tutorial::login_request, _impl_.icode_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tutorial::login_response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::login_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::login_response, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::tutorial::login_response, _impl_.desc_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::recharge_request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::recharge_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::recharge_request, _impl_.mobile_),
  PROTOBUF_FIELD_OFFSET(::tutorial::recharge_request, _impl_.amount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tutorial::recharge_response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::recharge_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::recharge_response, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::tutorial::recharge_response, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::tutorial::recharge_response, _impl_.balance_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::tutorial::account_balance_request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::account_balance_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::account_balance_request, _impl_.mobile_),
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::account_balance_response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::account_balance_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::account_balance_response, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::tutorial::account_balance_response, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::tutorial::account_balance_response, _impl_.balance_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::tutorial::list_account_records_request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_account_records_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::list_account_records_request, _impl_.mobile_),
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::list_account_records_response_account_record, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_account_records_response_account_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::list_account_records_response_account_record, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_account_records_response_account_record, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_account_records_response_account_record, _impl_.timestamp_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::tutorial::list_account_records_response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_account_records_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::list_account_records_response, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_account_records_response, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_account_records_response, _impl_.record_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tutorial::list_travel_records_request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_travel_records_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::list_travel_records_request, _impl_.mobile_),
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::list_travel_records_response_travel_record, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_travel_records_response_travel_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::list_travel_records_response_travel_record, _impl_.stm_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_travel_records_response_travel_record, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_travel_records_response_travel_record, _impl_.amount_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::tutorial::list_travel_records_response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_travel_records_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::list_travel_records_response, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_travel_records_response, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_travel_records_response, _impl_.mileage_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_travel_records_response, _impl_.discharge_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_travel_records_response, _impl_.calorie_),
  PROTOBUF_FIELD_OFFSET(::tutorial::list_travel_records_response, _impl_.records_),
  5,
  0,
  2,
  3,
  4,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::tutorial::mobile_request)},
  { 8, 17, -1, sizeof(::tutorial::mobile_response)},
  { 20, 28, -1, sizeof(::tutorial::login_request)},
  { 30, 38, -1, sizeof(::tutorial::login_response)},
  { 40, 48, -1, sizeof(::tutorial::recharge_request)},
  { 50, 59, -1, sizeof(::tutorial::recharge_response)},
  { 62, 69, -1, sizeof(::tutorial::account_balance_request)},
  { 70, 79, -1, sizeof(::tutorial::account_balance_response)},
  { 82, 89, -1, sizeof(::tutorial::list_account_records_request)},
  { 90, 99, -1, sizeof(::tutorial::list_account_records_response_account_record)},
  { 102, 111, -1, sizeof(::tutorial::list_account_records_response)},
  { 114, 121, -1, sizeof(::tutorial::list_travel_records_request)},
  { 122, 131, -1, sizeof(::tutorial::list_travel_records_response_travel_record)},
  { 134, 146, -1, sizeof(::tutorial::list_travel_records_response)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tutorial::_mobile_request_default_instance_._instance,
  &::tutorial::_mobile_response_default_instance_._instance,
  &::tutorial::_login_request_default_instance_._instance,
  &::tutorial::_login_response_default_instance_._instance,
  &::tutorial::_recharge_request_default_instance_._instance,
  &::tutorial::_recharge_response_default_instance_._instance,
  &::tutorial::_account_balance_request_default_instance_._instance,
  &::tutorial::_account_balance_response_default_instance_._instance,
  &::tutorial::_list_account_records_request_default_instance_._instance,
  &::tutorial::_list_account_records_response_account_record_default_instance_._instance,
  &::tutorial::_list_account_records_response_default_instance_._instance,
  &::tutorial::_list_travel_records_request_default_instance_._instance,
  &::tutorial::_list_travel_records_response_travel_record_default_instance_._instance,
  &::tutorial::_list_travel_records_response_default_instance_._instance,
};

const char descriptor_table_protodef_bike_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nbike.proto\022\010tutorial\" \n\016mobile_request"
  "\022\016\n\006mobile\030\001 \002(\t\"<\n\017mobile_response\022\014\n\004c"
  "ode\030\001 \002(\005\022\r\n\005icode\030\002 \002(\005\022\014\n\004data\030\003 \001(\t\"."
  "\n\rlogin_request\022\016\n\006mobile\030\001 \002(\t\022\r\n\005icode"
  "\030\002 \002(\005\",\n\016login_response\022\014\n\004code\030\001 \002(\005\022\014"
  "\n\004desc\030\002 \002(\t\"2\n\020recharge_request\022\016\n\006mobi"
  "le\030\001 \002(\t\022\016\n\006amount\030\002 \002(\005\"@\n\021recharge_res"
  "ponse\022\014\n\004code\030\001 \002(\005\022\014\n\004desc\030\002 \001(\t\022\017\n\007bal"
  "ance\030\003 \002(\005\")\n\027account_balance_request\022\016\n"
  "\006mobile\030\001 \002(\t\"G\n\030account_balance_respons"
  "e\022\014\n\004code\030\001 \002(\005\022\014\n\004desc\030\002 \001(\t\022\017\n\007balance"
  "\030\003 \002(\005\".\n\034list_account_records_request\022\016"
  "\n\006mobile\030\001 \002(\t\"\305\001\n\035list_account_records_"
  "response\022\014\n\004code\030\001 \002(\005\022\014\n\004desc\030\002 \001(\t\022F\n\006"
  "record\030\003 \003(\01326.tutorial.list_account_rec"
  "ords_response.account_record\032@\n\016account_"
  "record\022\014\n\004type\030\001 \002(\005\022\r\n\005limit\030\002 \002(\005\022\021\n\tt"
  "imestamp\030\003 \002(\004\"-\n\033list_travel_records_re"
  "quest\022\016\n\006mobile\030\001 \002(\t\"\366\001\n\034list_travel_re"
  "cords_response\022\014\n\004code\030\001 \002(\005\022\014\n\004desc\030\002 \001"
  "(\t\022\017\n\007mileage\030\003 \002(\001\022\021\n\tdischarge\030\004 \002(\001\022\017"
  "\n\007calorie\030\005 \002(\001\022E\n\007records\030\006 \002(\01324.tutor"
  "ial.list_travel_records_response.travel_"
  "record\032>\n\rtravel_record\022\013\n\003stm\030\001 \002(\004\022\020\n\010"
  "duration\030\002 \002(\r\022\016\n\006amount\030\003 \002(\r"
  ;
static ::_pbi::once_flag descriptor_table_bike_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_bike_2eproto = {
    false, false, 990, descriptor_table_protodef_bike_2eproto,
    "bike.proto",
    &descriptor_table_bike_2eproto_once, nullptr, 0, 14,
    schemas, file_default_instances, TableStruct_bike_2eproto::offsets,
    file_level_metadata_bike_2eproto, file_level_enum_descriptors_bike_2eproto,
    file_level_service_descriptors_bike_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_bike_2eproto_getter() {
  return &descriptor_table_bike_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_bike_2eproto(&descriptor_table_bike_2eproto);
namespace tutorial {

// ===================================================================

class mobile_request::_Internal {
 public:
  using HasBits = decltype(std::declval<mobile_request>()._impl_._has_bits_);
  static void set_has_mobile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

mobile_request::mobile_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.mobile_request)
}
mobile_request::mobile_request(const mobile_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  mobile_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobile_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mobile()) {
    _this->_impl_.mobile_.Set(from._internal_mobile(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.mobile_request)
}

inline void mobile_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobile_){}
  };
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

mobile_request::~mobile_request() {
  // @@protoc_insertion_point(destructor:tutorial.mobile_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mobile_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mobile_.Destroy();
}

void mobile_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mobile_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.mobile_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mobile_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mobile_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string mobile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mobile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.mobile_request.mobile");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mobile_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.mobile_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string mobile = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mobile().data(), static_cast<int>(this->_internal_mobile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.mobile_request.mobile");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mobile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.mobile_request)
  return target;
}

size_t mobile_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.mobile_request)
  size_t total_size = 0;

  // required string mobile = 1;
  if (_internal_has_mobile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mobile_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mobile_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mobile_request::GetClassData() const { return &_class_data_; }


void mobile_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mobile_request*>(&to_msg);
  auto& from = static_cast<const mobile_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.mobile_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mobile()) {
    _this->_internal_set_mobile(from._internal_mobile());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mobile_request::CopyFrom(const mobile_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.mobile_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mobile_request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void mobile_request::InternalSwap(mobile_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mobile_, lhs_arena,
      &other->_impl_.mobile_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata mobile_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bike_2eproto_getter, &descriptor_table_bike_2eproto_once,
      file_level_metadata_bike_2eproto[0]);
}

// ===================================================================

class mobile_response::_Internal {
 public:
  using HasBits = decltype(std::declval<mobile_response>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_icode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

mobile_response::mobile_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.mobile_response)
}
mobile_response::mobile_response(const mobile_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  mobile_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.icode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.code_, &from._impl_.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.icode_) -
    reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.icode_));
  // @@protoc_insertion_point(copy_constructor:tutorial.mobile_response)
}

inline void mobile_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.code_){0}
    , decltype(_impl_.icode_){0}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

mobile_response::~mobile_response() {
  // @@protoc_insertion_point(destructor:tutorial.mobile_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mobile_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void mobile_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mobile_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.mobile_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.icode_) -
        reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.icode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mobile_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 icode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_icode(&has_bits);
          _impl_.icode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.mobile_response.data");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mobile_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.mobile_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // required int32 icode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_icode(), target);
  }

  // optional string data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.mobile_response.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.mobile_response)
  return target;
}

size_t mobile_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.mobile_response)
  size_t total_size = 0;

  if (_internal_has_code()) {
    // required int32 code = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  if (_internal_has_icode()) {
    // required int32 icode = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_icode());
  }

  return total_size;
}
size_t mobile_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.mobile_response)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 code = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());

    // required int32 icode = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_icode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string data = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mobile_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mobile_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mobile_response::GetClassData() const { return &_class_data_; }


void mobile_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mobile_response*>(&to_msg);
  auto& from = static_cast<const mobile_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.mobile_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.icode_ = from._impl_.icode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mobile_response::CopyFrom(const mobile_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.mobile_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mobile_response::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void mobile_response::InternalSwap(mobile_response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mobile_response, _impl_.icode_)
      + sizeof(mobile_response::_impl_.icode_)
      - PROTOBUF_FIELD_OFFSET(mobile_response, _impl_.code_)>(
          reinterpret_cast<char*>(&_impl_.code_),
          reinterpret_cast<char*>(&other->_impl_.code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mobile_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bike_2eproto_getter, &descriptor_table_bike_2eproto_once,
      file_level_metadata_bike_2eproto[1]);
}

// ===================================================================

class login_request::_Internal {
 public:
  using HasBits = decltype(std::declval<login_request>()._impl_._has_bits_);
  static void set_has_mobile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_icode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

login_request::login_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.login_request)
}
login_request::login_request(const login_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  login_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobile_){}
    , decltype(_impl_.icode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mobile()) {
    _this->_impl_.mobile_.Set(from._internal_mobile(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.icode_ = from._impl_.icode_;
  // @@protoc_insertion_point(copy_constructor:tutorial.login_request)
}

inline void login_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobile_){}
    , decltype(_impl_.icode_){0}
  };
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

login_request::~login_request() {
  // @@protoc_insertion_point(destructor:tutorial.login_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void login_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mobile_.Destroy();
}

void login_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void login_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.login_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mobile_.ClearNonDefaultToEmpty();
  }
  _impl_.icode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string mobile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mobile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.login_request.mobile");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 icode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_icode(&has_bits);
          _impl_.icode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* login_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.login_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string mobile = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mobile().data(), static_cast<int>(this->_internal_mobile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.login_request.mobile");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mobile(), target);
  }

  // required int32 icode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_icode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.login_request)
  return target;
}

size_t login_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.login_request)
  size_t total_size = 0;

  if (_internal_has_mobile()) {
    // required string mobile = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile());
  }

  if (_internal_has_icode()) {
    // required int32 icode = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_icode());
  }

  return total_size;
}
size_t login_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.login_request)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string mobile = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile());

    // required int32 icode = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_icode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData login_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    login_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*login_request::GetClassData() const { return &_class_data_; }


void login_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<login_request*>(&to_msg);
  auto& from = static_cast<const login_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.login_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mobile(from._internal_mobile());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.icode_ = from._impl_.icode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void login_request::CopyFrom(const login_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.login_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void login_request::InternalSwap(login_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mobile_, lhs_arena,
      &other->_impl_.mobile_, rhs_arena
  );
  swap(_impl_.icode_, other->_impl_.icode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bike_2eproto_getter, &descriptor_table_bike_2eproto_once,
      file_level_metadata_bike_2eproto[2]);
}

// ===================================================================

class login_response::_Internal {
 public:
  using HasBits = decltype(std::declval<login_response>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

login_response::login_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.login_response)
}
login_response::login_response(const login_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  login_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_desc()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:tutorial.login_response)
}

inline void login_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.code_){0}
  };
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

login_response::~login_response() {
  // @@protoc_insertion_point(destructor:tutorial.login_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void login_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.desc_.Destroy();
}

void login_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void login_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.login_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.desc_.ClearNonDefaultToEmpty();
  }
  _impl_.code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.login_response.desc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* login_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.login_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // required string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.login_response.desc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.login_response)
  return target;
}

size_t login_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.login_response)
  size_t total_size = 0;

  if (_internal_has_desc()) {
    // required string desc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  if (_internal_has_code()) {
    // required int32 code = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return total_size;
}
size_t login_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.login_response)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string desc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());

    // required int32 code = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData login_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    login_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*login_response::GetClassData() const { return &_class_data_; }


void login_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<login_response*>(&to_msg);
  auto& from = static_cast<const login_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.login_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void login_response::CopyFrom(const login_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.login_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_response::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void login_response::InternalSwap(login_response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bike_2eproto_getter, &descriptor_table_bike_2eproto_once,
      file_level_metadata_bike_2eproto[3]);
}

// ===================================================================

class recharge_request::_Internal {
 public:
  using HasBits = decltype(std::declval<recharge_request>()._impl_._has_bits_);
  static void set_has_mobile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

recharge_request::recharge_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.recharge_request)
}
recharge_request::recharge_request(const recharge_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  recharge_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobile_){}
    , decltype(_impl_.amount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mobile()) {
    _this->_impl_.mobile_.Set(from._internal_mobile(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.amount_ = from._impl_.amount_;
  // @@protoc_insertion_point(copy_constructor:tutorial.recharge_request)
}

inline void recharge_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobile_){}
    , decltype(_impl_.amount_){0}
  };
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

recharge_request::~recharge_request() {
  // @@protoc_insertion_point(destructor:tutorial.recharge_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void recharge_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mobile_.Destroy();
}

void recharge_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void recharge_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.recharge_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mobile_.ClearNonDefaultToEmpty();
  }
  _impl_.amount_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* recharge_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string mobile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mobile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.recharge_request.mobile");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_amount(&has_bits);
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* recharge_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.recharge_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string mobile = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mobile().data(), static_cast<int>(this->_internal_mobile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.recharge_request.mobile");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mobile(), target);
  }

  // required int32 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.recharge_request)
  return target;
}

size_t recharge_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.recharge_request)
  size_t total_size = 0;

  if (_internal_has_mobile()) {
    // required string mobile = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile());
  }

  if (_internal_has_amount()) {
    // required int32 amount = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_amount());
  }

  return total_size;
}
size_t recharge_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.recharge_request)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string mobile = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile());

    // required int32 amount = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_amount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData recharge_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    recharge_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*recharge_request::GetClassData() const { return &_class_data_; }


void recharge_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<recharge_request*>(&to_msg);
  auto& from = static_cast<const recharge_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.recharge_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mobile(from._internal_mobile());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.amount_ = from._impl_.amount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void recharge_request::CopyFrom(const recharge_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.recharge_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void recharge_request::InternalSwap(recharge_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mobile_, lhs_arena,
      &other->_impl_.mobile_, rhs_arena
  );
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata recharge_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bike_2eproto_getter, &descriptor_table_bike_2eproto_once,
      file_level_metadata_bike_2eproto[4]);
}

// ===================================================================

class recharge_response::_Internal {
 public:
  using HasBits = decltype(std::declval<recharge_response>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

recharge_response::recharge_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.recharge_response)
}
recharge_response::recharge_response(const recharge_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  recharge_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.balance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_desc()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.code_, &from._impl_.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.balance_) -
    reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.balance_));
  // @@protoc_insertion_point(copy_constructor:tutorial.recharge_response)
}

inline void recharge_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.code_){0}
    , decltype(_impl_.balance_){0}
  };
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

recharge_response::~recharge_response() {
  // @@protoc_insertion_point(destructor:tutorial.recharge_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void recharge_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.desc_.Destroy();
}

void recharge_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void recharge_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.recharge_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.desc_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.balance_) -
        reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.balance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* recharge_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.recharge_response.desc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_balance(&has_bits);
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* recharge_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.recharge_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.recharge_response.desc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desc(), target);
  }

  // required int32 balance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.recharge_response)
  return target;
}

size_t recharge_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.recharge_response)
  size_t total_size = 0;

  if (_internal_has_code()) {
    // required int32 code = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  if (_internal_has_balance()) {
    // required int32 balance = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_balance());
  }

  return total_size;
}
size_t recharge_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.recharge_response)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 code = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());

    // required int32 balance = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_balance());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string desc = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData recharge_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    recharge_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*recharge_response::GetClassData() const { return &_class_data_; }


void recharge_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<recharge_response*>(&to_msg);
  auto& from = static_cast<const recharge_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.recharge_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.balance_ = from._impl_.balance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void recharge_response::CopyFrom(const recharge_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.recharge_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_response::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void recharge_response::InternalSwap(recharge_response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(recharge_response, _impl_.balance_)
      + sizeof(recharge_response::_impl_.balance_)
      - PROTOBUF_FIELD_OFFSET(recharge_response, _impl_.code_)>(
          reinterpret_cast<char*>(&_impl_.code_),
          reinterpret_cast<char*>(&other->_impl_.code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata recharge_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bike_2eproto_getter, &descriptor_table_bike_2eproto_once,
      file_level_metadata_bike_2eproto[5]);
}

// ===================================================================

class account_balance_request::_Internal {
 public:
  using HasBits = decltype(std::declval<account_balance_request>()._impl_._has_bits_);
  static void set_has_mobile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

account_balance_request::account_balance_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.account_balance_request)
}
account_balance_request::account_balance_request(const account_balance_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  account_balance_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobile_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mobile()) {
    _this->_impl_.mobile_.Set(from._internal_mobile(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.account_balance_request)
}

inline void account_balance_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobile_){}
  };
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

account_balance_request::~account_balance_request() {
  // @@protoc_insertion_point(destructor:tutorial.account_balance_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void account_balance_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mobile_.Destroy();
}

void account_balance_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void account_balance_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.account_balance_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mobile_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* account_balance_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string mobile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mobile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.account_balance_request.mobile");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* account_balance_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.account_balance_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string mobile = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mobile().data(), static_cast<int>(this->_internal_mobile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.account_balance_request.mobile");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mobile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.account_balance_request)
  return target;
}

size_t account_balance_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.account_balance_request)
  size_t total_size = 0;

  // required string mobile = 1;
  if (_internal_has_mobile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData account_balance_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    account_balance_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*account_balance_request::GetClassData() const { return &_class_data_; }


void account_balance_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<account_balance_request*>(&to_msg);
  auto& from = static_cast<const account_balance_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.account_balance_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mobile()) {
    _this->_internal_set_mobile(from._internal_mobile());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void account_balance_request::CopyFrom(const account_balance_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.account_balance_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_balance_request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void account_balance_request::InternalSwap(account_balance_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mobile_, lhs_arena,
      &other->_impl_.mobile_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata account_balance_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bike_2eproto_getter, &descriptor_table_bike_2eproto_once,
      file_level_metadata_bike_2eproto[6]);
}

// ===================================================================

class account_balance_response::_Internal {
 public:
  using HasBits = decltype(std::declval<account_balance_response>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

account_balance_response::account_balance_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.account_balance_response)
}
account_balance_response::account_balance_response(const account_balance_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  account_balance_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.balance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_desc()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.code_, &from._impl_.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.balance_) -
    reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.balance_));
  // @@protoc_insertion_point(copy_constructor:tutorial.account_balance_response)
}

inline void account_balance_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.code_){0}
    , decltype(_impl_.balance_){0}
  };
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

account_balance_response::~account_balance_response() {
  // @@protoc_insertion_point(destructor:tutorial.account_balance_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void account_balance_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.desc_.Destroy();
}

void account_balance_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void account_balance_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.account_balance_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.desc_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.balance_) -
        reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.balance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* account_balance_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.account_balance_response.desc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_balance(&has_bits);
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* account_balance_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.account_balance_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.account_balance_response.desc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desc(), target);
  }

  // required int32 balance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.account_balance_response)
  return target;
}

size_t account_balance_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.account_balance_response)
  size_t total_size = 0;

  if (_internal_has_code()) {
    // required int32 code = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  if (_internal_has_balance()) {
    // required int32 balance = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_balance());
  }

  return total_size;
}
size_t account_balance_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.account_balance_response)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 code = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());

    // required int32 balance = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_balance());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string desc = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData account_balance_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    account_balance_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*account_balance_response::GetClassData() const { return &_class_data_; }


void account_balance_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<account_balance_response*>(&to_msg);
  auto& from = static_cast<const account_balance_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.account_balance_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.balance_ = from._impl_.balance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void account_balance_response::CopyFrom(const account_balance_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.account_balance_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_balance_response::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void account_balance_response::InternalSwap(account_balance_response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(account_balance_response, _impl_.balance_)
      + sizeof(account_balance_response::_impl_.balance_)
      - PROTOBUF_FIELD_OFFSET(account_balance_response, _impl_.code_)>(
          reinterpret_cast<char*>(&_impl_.code_),
          reinterpret_cast<char*>(&other->_impl_.code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata account_balance_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bike_2eproto_getter, &descriptor_table_bike_2eproto_once,
      file_level_metadata_bike_2eproto[7]);
}

// ===================================================================

class list_account_records_request::_Internal {
 public:
  using HasBits = decltype(std::declval<list_account_records_request>()._impl_._has_bits_);
  static void set_has_mobile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

list_account_records_request::list_account_records_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.list_account_records_request)
}
list_account_records_request::list_account_records_request(const list_account_records_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  list_account_records_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobile_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mobile()) {
    _this->_impl_.mobile_.Set(from._internal_mobile(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.list_account_records_request)
}

inline void list_account_records_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobile_){}
  };
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

list_account_records_request::~list_account_records_request() {
  // @@protoc_insertion_point(destructor:tutorial.list_account_records_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void list_account_records_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mobile_.Destroy();
}

void list_account_records_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void list_account_records_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.list_account_records_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mobile_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* list_account_records_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string mobile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mobile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.list_account_records_request.mobile");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* list_account_records_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.list_account_records_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string mobile = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mobile().data(), static_cast<int>(this->_internal_mobile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.list_account_records_request.mobile");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mobile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.list_account_records_request)
  return target;
}

size_t list_account_records_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.list_account_records_request)
  size_t total_size = 0;

  // required string mobile = 1;
  if (_internal_has_mobile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData list_account_records_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    list_account_records_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*list_account_records_request::GetClassData() const { return &_class_data_; }


void list_account_records_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<list_account_records_request*>(&to_msg);
  auto& from = static_cast<const list_account_records_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.list_account_records_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mobile()) {
    _this->_internal_set_mobile(from._internal_mobile());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void list_account_records_request::CopyFrom(const list_account_records_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.list_account_records_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_account_records_request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void list_account_records_request::InternalSwap(list_account_records_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mobile_, lhs_arena,
      &other->_impl_.mobile_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata list_account_records_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bike_2eproto_getter, &descriptor_table_bike_2eproto_once,
      file_level_metadata_bike_2eproto[8]);
}

// ===================================================================

class list_account_records_response_account_record::_Internal {
 public:
  using HasBits = decltype(std::declval<list_account_records_response_account_record>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

list_account_records_response_account_record::list_account_records_response_account_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.list_account_records_response.account_record)
}
list_account_records_response_account_record::list_account_records_response_account_record(const list_account_records_response_account_record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  list_account_records_response_account_record* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:tutorial.list_account_records_response.account_record)
}

inline void list_account_records_response_account_record::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.limit_){0}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
  };
}

list_account_records_response_account_record::~list_account_records_response_account_record() {
  // @@protoc_insertion_point(destructor:tutorial.list_account_records_response.account_record)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void list_account_records_response_account_record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void list_account_records_response_account_record::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void list_account_records_response_account_record::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.list_account_records_response.account_record)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* list_account_records_response_account_record::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_limit(&has_bits);
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* list_account_records_response_account_record::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.list_account_records_response.account_record)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // required int32 limit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_limit(), target);
  }

  // required uint64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.list_account_records_response.account_record)
  return target;
}

size_t list_account_records_response_account_record::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.list_account_records_response.account_record)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required int32 type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  if (_internal_has_limit()) {
    // required int32 limit = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  if (_internal_has_timestamp()) {
    // required uint64 timestamp = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return total_size;
}
size_t list_account_records_response_account_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.list_account_records_response.account_record)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());

    // required int32 limit = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());

    // required uint64 timestamp = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData list_account_records_response_account_record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    list_account_records_response_account_record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*list_account_records_response_account_record::GetClassData() const { return &_class_data_; }


void list_account_records_response_account_record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<list_account_records_response_account_record*>(&to_msg);
  auto& from = static_cast<const list_account_records_response_account_record&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.list_account_records_response.account_record)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.limit_ = from._impl_.limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void list_account_records_response_account_record::CopyFrom(const list_account_records_response_account_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.list_account_records_response.account_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_account_records_response_account_record::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void list_account_records_response_account_record::InternalSwap(list_account_records_response_account_record* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(list_account_records_response_account_record, _impl_.timestamp_)
      + sizeof(list_account_records_response_account_record::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(list_account_records_response_account_record, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata list_account_records_response_account_record::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bike_2eproto_getter, &descriptor_table_bike_2eproto_once,
      file_level_metadata_bike_2eproto[9]);
}

// ===================================================================

class list_account_records_response::_Internal {
 public:
  using HasBits = decltype(std::declval<list_account_records_response>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

list_account_records_response::list_account_records_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.list_account_records_response)
}
list_account_records_response::list_account_records_response(const list_account_records_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  list_account_records_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.record_){from._impl_.record_}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_desc()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:tutorial.list_account_records_response)
}

inline void list_account_records_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.record_){arena}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.code_){0}
  };
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

list_account_records_response::~list_account_records_response() {
  // @@protoc_insertion_point(destructor:tutorial.list_account_records_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void list_account_records_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.record_.~RepeatedPtrField();
  _impl_.desc_.Destroy();
}

void list_account_records_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void list_account_records_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.list_account_records_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.record_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.desc_.ClearNonDefaultToEmpty();
  }
  _impl_.code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* list_account_records_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.list_account_records_response.desc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .tutorial.list_account_records_response.account_record record = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* list_account_records_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.list_account_records_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.list_account_records_response.desc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desc(), target);
  }

  // repeated .tutorial.list_account_records_response.account_record record = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_record_size()); i < n; i++) {
    const auto& repfield = this->_internal_record(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.list_account_records_response)
  return target;
}

size_t list_account_records_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.list_account_records_response)
  size_t total_size = 0;

  // required int32 code = 1;
  if (_internal_has_code()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tutorial.list_account_records_response.account_record record = 3;
  total_size += 1UL * this->_internal_record_size();
  for (const auto& msg : this->_impl_.record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string desc = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData list_account_records_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    list_account_records_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*list_account_records_response::GetClassData() const { return &_class_data_; }


void list_account_records_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<list_account_records_response*>(&to_msg);
  auto& from = static_cast<const list_account_records_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.list_account_records_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.record_.MergeFrom(from._impl_.record_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void list_account_records_response::CopyFrom(const list_account_records_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.list_account_records_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_account_records_response::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.record_))
    return false;
  return true;
}

void list_account_records_response::InternalSwap(list_account_records_response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.record_.InternalSwap(&other->_impl_.record_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata list_account_records_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bike_2eproto_getter, &descriptor_table_bike_2eproto_once,
      file_level_metadata_bike_2eproto[10]);
}

// ===================================================================

class list_travel_records_request::_Internal {
 public:
  using HasBits = decltype(std::declval<list_travel_records_request>()._impl_._has_bits_);
  static void set_has_mobile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

list_travel_records_request::list_travel_records_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.list_travel_records_request)
}
list_travel_records_request::list_travel_records_request(const list_travel_records_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  list_travel_records_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobile_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mobile()) {
    _this->_impl_.mobile_.Set(from._internal_mobile(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.list_travel_records_request)
}

inline void list_travel_records_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobile_){}
  };
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

list_travel_records_request::~list_travel_records_request() {
  // @@protoc_insertion_point(destructor:tutorial.list_travel_records_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void list_travel_records_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mobile_.Destroy();
}

void list_travel_records_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void list_travel_records_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.list_travel_records_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mobile_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* list_travel_records_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string mobile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mobile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.list_travel_records_request.mobile");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* list_travel_records_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.list_travel_records_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string mobile = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mobile().data(), static_cast<int>(this->_internal_mobile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.list_travel_records_request.mobile");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mobile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.list_travel_records_request)
  return target;
}

size_t list_travel_records_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.list_travel_records_request)
  size_t total_size = 0;

  // required string mobile = 1;
  if (_internal_has_mobile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData list_travel_records_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    list_travel_records_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*list_travel_records_request::GetClassData() const { return &_class_data_; }


void list_travel_records_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<list_travel_records_request*>(&to_msg);
  auto& from = static_cast<const list_travel_records_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.list_travel_records_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mobile()) {
    _this->_internal_set_mobile(from._internal_mobile());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void list_travel_records_request::CopyFrom(const list_travel_records_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.list_travel_records_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_travel_records_request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void list_travel_records_request::InternalSwap(list_travel_records_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mobile_, lhs_arena,
      &other->_impl_.mobile_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata list_travel_records_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bike_2eproto_getter, &descriptor_table_bike_2eproto_once,
      file_level_metadata_bike_2eproto[11]);
}

// ===================================================================

class list_travel_records_response_travel_record::_Internal {
 public:
  using HasBits = decltype(std::declval<list_travel_records_response_travel_record>()._impl_._has_bits_);
  static void set_has_stm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

list_travel_records_response_travel_record::list_travel_records_response_travel_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.list_travel_records_response.travel_record)
}
list_travel_records_response_travel_record::list_travel_records_response_travel_record(const list_travel_records_response_travel_record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  list_travel_records_response_travel_record* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stm_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.amount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stm_, &from._impl_.stm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.amount_) -
    reinterpret_cast<char*>(&_impl_.stm_)) + sizeof(_impl_.amount_));
  // @@protoc_insertion_point(copy_constructor:tutorial.list_travel_records_response.travel_record)
}

inline void list_travel_records_response_travel_record::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stm_){uint64_t{0u}}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.amount_){0u}
  };
}

list_travel_records_response_travel_record::~list_travel_records_response_travel_record() {
  // @@protoc_insertion_point(destructor:tutorial.list_travel_records_response.travel_record)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void list_travel_records_response_travel_record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void list_travel_records_response_travel_record::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void list_travel_records_response_travel_record::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.list_travel_records_response.travel_record)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.stm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.amount_) -
        reinterpret_cast<char*>(&_impl_.stm_)) + sizeof(_impl_.amount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* list_travel_records_response_travel_record::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 stm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_stm(&has_bits);
          _impl_.stm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_amount(&has_bits);
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* list_travel_records_response_travel_record::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.list_travel_records_response.travel_record)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 stm = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stm(), target);
  }

  // required uint32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  // required uint32 amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.list_travel_records_response.travel_record)
  return target;
}

size_t list_travel_records_response_travel_record::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.list_travel_records_response.travel_record)
  size_t total_size = 0;

  if (_internal_has_stm()) {
    // required uint64 stm = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_stm());
  }

  if (_internal_has_duration()) {
    // required uint32 duration = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
  }

  if (_internal_has_amount()) {
    // required uint32 amount = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_amount());
  }

  return total_size;
}
size_t list_travel_records_response_travel_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.list_travel_records_response.travel_record)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 stm = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_stm());

    // required uint32 duration = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());

    // required uint32 amount = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_amount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData list_travel_records_response_travel_record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    list_travel_records_response_travel_record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*list_travel_records_response_travel_record::GetClassData() const { return &_class_data_; }


void list_travel_records_response_travel_record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<list_travel_records_response_travel_record*>(&to_msg);
  auto& from = static_cast<const list_travel_records_response_travel_record&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.list_travel_records_response.travel_record)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.stm_ = from._impl_.stm_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.amount_ = from._impl_.amount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void list_travel_records_response_travel_record::CopyFrom(const list_travel_records_response_travel_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.list_travel_records_response.travel_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_travel_records_response_travel_record::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void list_travel_records_response_travel_record::InternalSwap(list_travel_records_response_travel_record* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(list_travel_records_response_travel_record, _impl_.amount_)
      + sizeof(list_travel_records_response_travel_record::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(list_travel_records_response_travel_record, _impl_.stm_)>(
          reinterpret_cast<char*>(&_impl_.stm_),
          reinterpret_cast<char*>(&other->_impl_.stm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata list_travel_records_response_travel_record::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bike_2eproto_getter, &descriptor_table_bike_2eproto_once,
      file_level_metadata_bike_2eproto[12]);
}

// ===================================================================

class list_travel_records_response::_Internal {
 public:
  using HasBits = decltype(std::declval<list_travel_records_response>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mileage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_discharge(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_calorie(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tutorial::list_travel_records_response_travel_record& records(const list_travel_records_response* msg);
  static void set_has_records(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003e) ^ 0x0000003e) != 0;
  }
};

const ::tutorial::list_travel_records_response_travel_record&
list_travel_records_response::_Internal::records(const list_travel_records_response* msg) {
  return *msg->_impl_.records_;
}
list_travel_records_response::list_travel_records_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.list_travel_records_response)
}
list_travel_records_response::list_travel_records_response(const list_travel_records_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  list_travel_records_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.records_){nullptr}
    , decltype(_impl_.mileage_){}
    , decltype(_impl_.discharge_){}
    , decltype(_impl_.calorie_){}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_desc()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_records()) {
    _this->_impl_.records_ = new ::tutorial::list_travel_records_response_travel_record(*from._impl_.records_);
  }
  ::memcpy(&_impl_.mileage_, &from._impl_.mileage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.mileage_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:tutorial.list_travel_records_response)
}

inline void list_travel_records_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.records_){nullptr}
    , decltype(_impl_.mileage_){0}
    , decltype(_impl_.discharge_){0}
    , decltype(_impl_.calorie_){0}
    , decltype(_impl_.code_){0}
  };
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

list_travel_records_response::~list_travel_records_response() {
  // @@protoc_insertion_point(destructor:tutorial.list_travel_records_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void list_travel_records_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.desc_.Destroy();
  if (this != internal_default_instance()) delete _impl_.records_;
}

void list_travel_records_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void list_travel_records_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.list_travel_records_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.records_ != nullptr);
      _impl_.records_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.mileage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.code_) -
        reinterpret_cast<char*>(&_impl_.mileage_)) + sizeof(_impl_.code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* list_travel_records_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.list_travel_records_response.desc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required double mileage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_mileage(&has_bits);
          _impl_.mileage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double discharge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_discharge(&has_bits);
          _impl_.discharge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double calorie = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_calorie(&has_bits);
          _impl_.calorie_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required .tutorial.list_travel_records_response.travel_record records = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_records(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* list_travel_records_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.list_travel_records_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 code = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.list_travel_records_response.desc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desc(), target);
  }

  // required double mileage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_mileage(), target);
  }

  // required double discharge = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_discharge(), target);
  }

  // required double calorie = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_calorie(), target);
  }

  // required .tutorial.list_travel_records_response.travel_record records = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::records(this),
        _Internal::records(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.list_travel_records_response)
  return target;
}

size_t list_travel_records_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.list_travel_records_response)
  size_t total_size = 0;

  if (_internal_has_records()) {
    // required .tutorial.list_travel_records_response.travel_record records = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.records_);
  }

  if (_internal_has_mileage()) {
    // required double mileage = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_discharge()) {
    // required double discharge = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_calorie()) {
    // required double calorie = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_code()) {
    // required int32 code = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return total_size;
}
size_t list_travel_records_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.list_travel_records_response)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003e) ^ 0x0000003e) == 0) {  // All required fields are present.
    // required .tutorial.list_travel_records_response.travel_record records = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.records_);

    // required double mileage = 3;
    total_size += 1 + 8;

    // required double discharge = 4;
    total_size += 1 + 8;

    // required double calorie = 5;
    total_size += 1 + 8;

    // required int32 code = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string desc = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData list_travel_records_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    list_travel_records_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*list_travel_records_response::GetClassData() const { return &_class_data_; }


void list_travel_records_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<list_travel_records_response*>(&to_msg);
  auto& from = static_cast<const list_travel_records_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.list_travel_records_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_records()->::tutorial::list_travel_records_response_travel_record::MergeFrom(
          from._internal_records());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mileage_ = from._impl_.mileage_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.discharge_ = from._impl_.discharge_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.calorie_ = from._impl_.calorie_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void list_travel_records_response::CopyFrom(const list_travel_records_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.list_travel_records_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_travel_records_response::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_records()) {
    if (!_impl_.records_->IsInitialized()) return false;
  }
  return true;
}

void list_travel_records_response::InternalSwap(list_travel_records_response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(list_travel_records_response, _impl_.code_)
      + sizeof(list_travel_records_response::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(list_travel_records_response, _impl_.records_)>(
          reinterpret_cast<char*>(&_impl_.records_),
          reinterpret_cast<char*>(&other->_impl_.records_));
}

::PROTOBUF_NAMESPACE_ID::Metadata list_travel_records_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bike_2eproto_getter, &descriptor_table_bike_2eproto_once,
      file_level_metadata_bike_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tutorial::mobile_request*
Arena::CreateMaybeMessage< ::tutorial::mobile_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::mobile_request >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::mobile_response*
Arena::CreateMaybeMessage< ::tutorial::mobile_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::mobile_response >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::login_request*
Arena::CreateMaybeMessage< ::tutorial::login_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::login_request >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::login_response*
Arena::CreateMaybeMessage< ::tutorial::login_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::login_response >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::recharge_request*
Arena::CreateMaybeMessage< ::tutorial::recharge_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::recharge_request >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::recharge_response*
Arena::CreateMaybeMessage< ::tutorial::recharge_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::recharge_response >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::account_balance_request*
Arena::CreateMaybeMessage< ::tutorial::account_balance_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::account_balance_request >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::account_balance_response*
Arena::CreateMaybeMessage< ::tutorial::account_balance_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::account_balance_response >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::list_account_records_request*
Arena::CreateMaybeMessage< ::tutorial::list_account_records_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::list_account_records_request >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::list_account_records_response_account_record*
Arena::CreateMaybeMessage< ::tutorial::list_account_records_response_account_record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::list_account_records_response_account_record >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::list_account_records_response*
Arena::CreateMaybeMessage< ::tutorial::list_account_records_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::list_account_records_response >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::list_travel_records_request*
Arena::CreateMaybeMessage< ::tutorial::list_travel_records_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::list_travel_records_request >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::list_travel_records_response_travel_record*
Arena::CreateMaybeMessage< ::tutorial::list_travel_records_response_travel_record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::list_travel_records_response_travel_record >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::list_travel_records_response*
Arena::CreateMaybeMessage< ::tutorial::list_travel_records_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::list_travel_records_response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
